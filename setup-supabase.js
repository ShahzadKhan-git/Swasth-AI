#!/usr/bin/env node

// setup-supabase.js - Interactive Supabase configuration setup
const readline = require('readline')
const fs = require('fs')
const path = require('path')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(query) {
  return new Promise(resolve => rl.question(query, resolve))
}

async function setupSupabase() {
  console.log('\nüöÄ SwasthAI Supabase Configuration Setup\n')
  console.log('This script will help you configure Supabase for your SwasthAI application.\n')

  // Check if .env.local already exists
  const envPath = path.join(process.cwd(), '.env.local')
  const envExists = fs.existsSync(envPath)
  
  if (envExists) {
    console.log('‚ö†Ô∏è  .env.local file already exists.')
    const overwrite = await question('Do you want to overwrite it? (y/N): ')
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.')
      rl.close()
      return
    }
  }

  console.log('\nüìã You\'ll need to get your Supabase credentials:')
  console.log('1. Go to https://supabase.com/dashboard')
  console.log('2. Select your project (or create a new one)')
  console.log('3. Go to Settings ‚Üí API')
  console.log('4. Copy the values when prompted below\n')

  // Get Supabase URL
  let supabaseUrl = ''
  while (!supabaseUrl || !supabaseUrl.startsWith('https://')) {
    supabaseUrl = await question('Enter your Supabase Project URL (starts with https://): ')
    if (!supabaseUrl.startsWith('https://')) {
      console.log('‚ùå Please enter a valid HTTPS URL')
    }
  }

  // Get Supabase Anon Key
  let supabaseKey = ''
  while (!supabaseKey || supabaseKey.length < 20) {
    supabaseKey = await question('Enter your Supabase Anon Key: ')
    if (supabaseKey.length < 20) {
      console.log('‚ùå The key seems too short. Please check and try again.')
    }
  }

  // Create .env.local content
  const envContent = `# Supabase Configuration
# Generated by setup-supabase.js on ${new Date().toISOString()}

NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${supabaseKey}

# Optional: Add other environment variables below
# GEMINI_API_KEY=your_gemini_api_key_here
`

  try {
    fs.writeFileSync(envPath, envContent)
    console.log('\n‚úÖ Successfully created .env.local file!')
    console.log('\nüìÅ File location:', envPath)
    console.log('\nüîÑ Next steps:')
    console.log('1. Restart your development server: npm run dev')
    console.log('2. Your Supabase authentication should now work!')
    console.log('3. Test signup/login functionality')
    
    console.log('\nüîß If you need to set up the database schema:')
    console.log('1. Go to your Supabase dashboard')
    console.log('2. Open the SQL Editor')
    console.log('3. Run the SQL from: supabase-schema-production.sql')
    
  } catch (error) {
    console.error('\n‚ùå Failed to create .env.local file:', error.message)
  }

  rl.close()
}

// Run the setup
setupSupabase().catch(console.error)
